/** This interface represents all of the JSON Schema functionality that is supported by this module. */
export interface JSONSchemaNode {
    type: "string" | "number" | "boolean" | "object" | "array";

    description?: string;
    pattern?: string;

    ["$schema"]?: string;
    ["$ref"]?: string;

    ["$defs"]?: {
        [key: string]: JSONSchemaNode;
    }

    properties?: {
        [key: string]: JSONSchemaNode;
    }

    required?: string[];
}

export class GenerationError extends Error {
    constructor(message: string) {
        super(message);
    }
}

function generateRecursive(node: JSONSchemaNode, path: string[]): string {
    const errorHeader = `JSON validation error at ${path.length > 0 ? `"${path.join(".")}"` : "root"}:`;
    let code = "";

    // Check the type of this node
    const valuePath = `json${path.map(e => `.${e}`).join("")}`;
    const nodeType = node.type;

    let typeTestCode;
    switch (nodeType) {
        case "string":
        case "number":
        case "boolean":
            typeTestCode = `typeof(${valuePath}) !== "${nodeType}"`;
            break;
        
        case "array":
            typeTestCode = `!Array.isArray(${valuePath})`;
            break;
        
        case "object":
            typeTestCode = `typeof(${valuePath}) !== "${nodeType}" || Array.isArray(${valuePath})`;
            break;
    }
    
    code += `if (${typeTestCode}) {
        throw \`${errorHeader} expected ${nodeType}, but encountered \${typeof(${valuePath})}\`;
    }
    `;

    switch (nodeType) {
        case "string": // TODO: Pattern (and maybe format) checking!
        case "number":
        case "boolean":
            // Type checking has already been done; nothing else is needed
            break;

        case "object":
            {
                if (!node.properties) {
                    throw new GenerationError(`No properties defined on object!`);
                }

                // Check for required properties
                if (node.required) {
                    for (const propertyName of node.required) {
                        if (!node.properties || node.properties[propertyName] === undefined) {
                            throw new GenerationError(`Required property ${propertyName} isn't defined!`);
                        }

                        code += `if (${valuePath}.${propertyName} === undefined) {
                            throw \`${errorHeader} missing required property: ${propertyName}\`;
                        }
                        `;
                    }
                }

                // Check properties
                for (const [propertyName, property] of Object.entries(node.properties)) {
                    code += `if (${valuePath}.${propertyName} !== undefined) {
                        ${generateRecursive(property, path.concat([propertyName]))}
                    }
                    `;
                }

                // Confirm no additional properties
                code += `for (const propertyName of Object.keys(${valuePath})) {
                    switch (propertyName) {
                        ${Object.keys(node.properties).map(p => `case \"${p}\":`).join("\n")}
                            break;
                        
                        default:
                            throw \`${errorHeader} encountered unexpected property: \${propertyName}\`;
                    }
                }
                `;
            }
            break;
        
        case "array":
            // TODO: Check item type
            break;
    }
    
    return code;
}

/** Generate JavaScript code for validating the given JSON Schema. This should be done during development and the resulting code should be (programmatically) formatted and then checked into source control.
 * 
 * Note: This function should only be called with known safe JSON Schema input (i.e. schema you created yourself). This function has not been analyzed from a security perspective.
 */
export function generateValidatorCode(schema: JSONSchemaNode): string {
    let code = "// Do not edit by hand. This file was generated by json-schema-aot.\n\n"
    // TODO: Find references and create functions for them (to handle recursion)
    code += `export function validate(json) {
        ${generateRecursive(schema, [])}
    }`;

    return code;
}

/** Convenience function for converting a schema object into a JSON schema file.
 * 
 * This can be handy for generating schema programmatically or just to avoid having to put quotes around property names and worry about trailing commas. */
export function generateSchema(schema: JSONSchemaNode): string {
    return JSON.stringify(schema, undefined, 4);
}

// TODO: Generate TypeScript code from schema
