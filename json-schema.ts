// Do not edit by hand. This file was generated by json-schema-aot.

export interface JSONSchemaDefinitions {
    [key: string]: JSONSchema;
}

/** This interface represents all of the JSON Schema functionality that is supported by this module. */
export interface JSONSchema {
    /** Note: this property is used to generate the name of the type used in TypeScript declarations. */
    title?: string;
    /** Note: this property is added as JSDoc comments in TypeScript declarations. */
    description?: string;
    $schema?: string;
    $comment?: string;
    /** Use this to refer to another point in this schema. Example format: `#/$defs/customSubschema`. */
    $ref?: string;
    /** By convention, subschema are defined here and referenced elsewhere. */
    $defs?: JSONSchemaDefinitions;
    /** This is the old name for `$defs` (allowed here for compatibility). */
    definitions?: JSONSchemaDefinitions;
    type?: "string" | "number" | "boolean" | "object" | "array";
    /** Regular expression used for validating string types. */
    pattern?: string;
    /** String indicating the format of a string type. The "date" and "date-time" formats have special handling: when validating, Date objects are tolerated; when parsing, the string is converted to a Date object. */
    format?: string;
    /** Defines properties allowed on objects. */
    properties?: {
        [key: string]: JSONSchema;
    };
    /** Indicates which properties from `properties` are required on objects. */
    required?: string[];
    /** By default, extra properties (beyond what's specified in `properties`) of any type are allowed. Set to false to disallow extra properties. Set to a specific type to type check extra properties. */
    additionalProperties?: boolean | JSONSchema;
    /** Defines the schema for array elements. */
    items?: JSONSchema;
    anyOf?: JSONSchema[];
    allOf?: JSONSchema[];
}

// deno-lint-ignore no-explicit-any
function parseJSONSchemaDefinitions(json: any) {
    if (json === null) {
        throw `JSON validation error at "$defs.definitions": expected object, but encountered null`;
    } else if (typeof(json) !== "object") {
        throw `JSON validation error at "$defs.definitions": expected object, but encountered ${typeof(json)}`;
    } else if (Array.isArray(json)) {
        throw `JSON validation error at "$defs.definitions": expected object, but encountered an array`;
    }
    
    // deno-lint-ignore no-explicit-any
    const jsonResultObject: any = {};
    // deno-lint-ignore no-explicit-any
    for (const [jsonKey, jsonValue] of Object.entries(json as Record<string, any>)) {
        jsonResultObject[jsonKey] = (() => {
            switch (jsonKey) {
                
                default: {
                    return parseJSONSchema(jsonValue);
                    
                }
                
            }
        })();
    }
    return jsonResultObject;
    
}

// deno-lint-ignore no-explicit-any
function parseJSONSchema(json: any) {
    if (json === null) {
        throw `JSON validation error at root: expected object, but encountered null`;
    } else if (typeof(json) !== "object") {
        throw `JSON validation error at root: expected object, but encountered ${typeof(json)}`;
    } else if (Array.isArray(json)) {
        throw `JSON validation error at root: expected object, but encountered an array`;
    }
    
    // deno-lint-ignore no-explicit-any
    const jsonResultObject: any = {};
    // deno-lint-ignore no-explicit-any
    for (const [jsonKey, jsonValue] of Object.entries(json as Record<string, any>)) {
        jsonResultObject[jsonKey] = (() => {
            switch (jsonKey) {
                case "$schema": {
                    
                    if (typeof(jsonValue) !== "string") {
                        throw `JSON validation error at "$schema": expected string, but encountered ${typeof(jsonValue)}`;
                    }
                    return jsonValue;
                    
                }
                
                case "title": {
                    
                    if (typeof(jsonValue) !== "string") {
                        throw `JSON validation error at "title": expected string, but encountered ${typeof(jsonValue)}`;
                    }
                    return jsonValue;
                    
                }
                
                case "description": {
                    
                    if (typeof(jsonValue) !== "string") {
                        throw `JSON validation error at "description": expected string, but encountered ${typeof(jsonValue)}`;
                    }
                    return jsonValue;
                    
                }
                
                case "$comment": {
                    
                    if (typeof(jsonValue) !== "string") {
                        throw `JSON validation error at "$comment": expected string, but encountered ${typeof(jsonValue)}`;
                    }
                    return jsonValue;
                    
                }
                
                case "$ref": {
                    
                    if (typeof(jsonValue) !== "string") {
                        throw `JSON validation error at "$ref": expected string, but encountered ${typeof(jsonValue)}`;
                    }
                    if (!(/^#(\/[$a-zA-Z0-9]+)*$/.test(jsonValue))) {
                        throw `JSON validation error at "$ref": string did not match pattern /^#(\/[$a-zA-Z0-9]+)*$/: ${jsonValue}`;
                    }
                    return jsonValue;
                    
                }
                
                case "$defs": {
                    
                    return parseJSONSchemaDefinitions(jsonValue);
                    
                }
                
                case "definitions": {
                    
                    return parseJSONSchemaDefinitions(jsonValue);
                    
                }
                
                case "type": {
                    
                    if (typeof(jsonValue) !== "string") {
                        throw `JSON validation error at "type": expected string, but encountered ${typeof(jsonValue)}`;
                    }
                    if (!(/^(string|number|boolean|object|array)$/.test(jsonValue))) {
                        throw `JSON validation error at "type": string did not match pattern /^(string|number|boolean|object|array)$/: ${jsonValue}`;
                    }
                    return jsonValue;
                    
                }
                
                case "pattern": {
                    
                    if (typeof(jsonValue) !== "string") {
                        throw `JSON validation error at "pattern": expected string, but encountered ${typeof(jsonValue)}`;
                    }
                    return jsonValue;
                    
                }
                
                case "format": {
                    
                    if (typeof(jsonValue) !== "string") {
                        throw `JSON validation error at "format": expected string, but encountered ${typeof(jsonValue)}`;
                    }
                    return jsonValue;
                    
                }
                
                case "properties": {
                    
                    if (jsonValue === null) {
                        throw `JSON validation error at "properties": expected object, but encountered null`;
                    } else if (typeof(jsonValue) !== "object") {
                        throw `JSON validation error at "properties": expected object, but encountered ${typeof(jsonValue)}`;
                    } else if (Array.isArray(jsonValue)) {
                        throw `JSON validation error at "properties": expected object, but encountered an array`;
                    }
                    
                    // deno-lint-ignore no-explicit-any
                    const jsonValueResultObject: any = {};
                    // deno-lint-ignore no-explicit-any
                    for (const [jsonValueKey, jsonValueValue] of Object.entries(jsonValue as Record<string, any>)) {
                        jsonValueResultObject[jsonValueKey] = (() => {
                            switch (jsonValueKey) {
                                
                                default: {
                                    return parseJSONSchema(jsonValueValue);
                                    
                                }
                                
                            }
                        })();
                    }
                    return jsonValueResultObject;
                    
                }
                
                case "required": {
                    
                    if (typeof(jsonValue) !== "object" || !Array.isArray(jsonValue)) {
                        throw `JSON validation error at "required": expected array, but encountered ${typeof(jsonValue)}`;
                    }
                    
                    return jsonValue.map(jsonValueElement => {
                        if (typeof(jsonValueElement) !== "string") {
                            throw `JSON validation error at "required.items": expected string, but encountered ${typeof(jsonValueElement)}`;
                        }
                        return jsonValueElement;
                        
                    })
                    
                }
                
                case "additionalProperties": {
                    
                    const jsonValueErrors = [];
                    try {
                        if (typeof(jsonValue) !== "boolean") {
                            throw `JSON validation error at "additionalProperties.anyOf": expected boolean, but encountered ${typeof(jsonValue)}`;
                        }
                        
                        return jsonValue;
                        
                    } catch (error) {
                        jsonValueErrors.push(error);
                    }
                    try {
                        return parseJSONSchema(jsonValue);
                        
                    } catch (error) {
                        jsonValueErrors.push(error);
                    }
                    throw `JSON validation error at "additionalProperties": failed to match any of the specified types: ${jsonValueErrors.join("\n\n")}`;
                    
                }
                
                case "items": {
                    
                    return parseJSONSchema(jsonValue);
                    
                }
                
                case "anyOf": {
                    
                    if (typeof(jsonValue) !== "object" || !Array.isArray(jsonValue)) {
                        throw `JSON validation error at "anyOf": expected array, but encountered ${typeof(jsonValue)}`;
                    }
                    
                    return jsonValue.map(jsonValueElement => {
                        return parseJSONSchema(jsonValueElement);
                        
                    })
                    
                }
                
                case "allOf": {
                    
                    if (typeof(jsonValue) !== "object" || !Array.isArray(jsonValue)) {
                        throw `JSON validation error at "allOf": expected array, but encountered ${typeof(jsonValue)}`;
                    }
                    
                    return jsonValue.map(jsonValueElement => {
                        return parseJSONSchema(jsonValueElement);
                        
                    })
                    
                }
                
                default: {
                    throw `JSON validation error at root: encountered unexpected property: ${jsonKey}`;
                }
            }
        })();
    }
    return jsonResultObject;
    
}

// deno-lint-ignore no-explicit-any
export function parse(json: any): JSONSchema {
    return parseJSONSchema(json);
    
}

// deno-lint-ignore no-explicit-any
export function validate(json: any) {
    parse(json);
}

